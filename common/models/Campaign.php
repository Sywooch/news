<?php

namespace common\models;

use common\helpers\Brandname;
use DateTime;
use DOMDocument;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\helpers\ArrayHelper;
use yii\helpers\Url;

/**
 * This is the model class for table "{{%campaign}}".
 *
 * @property integer $id
 * @property integer $donation_request_id
 * @property string $name
 * @property string $ascii_name
 * @property string $short_description
 * @property string $thumbnail
 * @property string $screenshots
 * @property string $campaign_code
 * @property integer $type
 * @property string $tags
 * @property string $description
 * @property string $content
 * @property integer $view_count
 * @property integer $like_count
 * @property integer $comment_count
 * @property integer $follower_count
 * @property integer $status
 * @property string $admin_note
 * @property double $expected_amount
 * @property double $current_amount
 * @property integer $donor_count
 * @property string $currency
 * @property integer $honor
 * @property integer $approved_at
 * @property integer $created_by
 * @property integer $created_for_user
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $donation_status
 * @property integer $started_at
 * @property integer $finished_at
 * @property integer $published_at
 * @property integer $village_id
 * @property integer $lead_donor_id
 * @property string $direct_donation_address
 *
 * @property User $createdBy
 * @property Village $village
 * @property LeadDonor $leadDonor
 * @property User $createdForUser
 * @property DonationRequest $donationRequest
 * @property CampaignCategoryAsm[] $campaignCategoryAsms
 * @property CampaignFollowing[] $campaignFollowings
 * @property News[] $news
 * @property Transaction[] $transactions
 * @property CampaignRelatedAsm[] $campaignRelatedAsms
 * @property CampaignGallery[] $campaignGalleries
 */
class Campaign extends \yii\db\ActiveRecord
{
    const TYPE_MONEY = 1;
    const TYPE_ITEM = 2;

    const STATUS_ACTIVE = 10;
    const STATUS_NEW = 0;
    const STATUS_INACTIVE = 4;
    const STATUS_DONE = 9;
    const STATUS_DELETED = 8;

    public $imageAsms;
    public $categoryAsms;

    public $album_image = [];

    public $start_date, $end_date;

    public $direct_donation;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%campaign}}';
    }


    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => false
            ],
        ];
    }

//    public function beforeValidate()
//    {
//        if (!$this->campaign_code) {
//
//            $this->campaign_code = (string)time();
//        }
//        return parent::beforeValidate(); // TODO: Change the autogenerated stub
//    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($insert) {
            $code = str_pad($this->id, 6, "0", STR_PAD_LEFT);

            $this->campaign_code = 'CP' . $code;
            $this->save(false);
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['donation_request_id', 'type', 'view_count', 'like_count', 'comment_count',
                'follower_count', 'status', 'donor_count', 'honor', 'approved_at', 'created_by',
                'created_for_user', 'created_at', 'updated_at', 'donation_status', 'lead_donor_id',
                'village_id', 'published_at'], 'integer'],
            [['name'], 'required'],
            [['description', 'content', 'screenshots', 'direct_donation_address'], 'string'],
            [['expected_amount', 'current_amount'], 'number'],
            [['name'], 'string', 'max' => 1024],
            [['ascii_name', 'thumbnail'], 'string', 'max' => 200],
            [['short_description', 'tags'], 'string', 'max' => 500],
            [['campaign_code', 'currency'], 'string', 'max' => 20],
            [['admin_note'], 'string', 'max' => 4000],
            [['campaign_code'], 'unique'],
            [['end_date'], 'validDate'],
            [['start_date', 'end_date', 'village_id'], 'safe'],
            [['start_date', 'end_date'], 'required', 'on' => ['create', 'update']],
            [['finished_at', 'started_at', 'village_id'], 'required'],
            [['thumbnail'], 'required', 'on' => 'create'],

            [['thumbnail'], 'image', 'extensions' => 'png,jpg,jpeg,gif',
                'maxSize' => 1024 * 1024 * 10, 'tooBig' => 'Ảnh upload vượt quá dung lượng cho phép!'
            ],
        ];
    }

    public function validDate($attribute, $params)
    {
        $started_at = strtotime(DateTime::createFromFormat("d-m-Y H:i:s", $this->start_date)->format('Y-m-d H:i:s'));;
        $finished_at = strtotime(DateTime::createFromFormat("d-m-Y H:i:s", $this->end_date)->format('Y-m-d H:i:s'));;
        if ($finished_at < $started_at) {
            $this->addError($attribute, 'Ngày kết thúc không được nhỏ hơn ngày bắt đầu');
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'donation_request_id' => Yii::t('app', 'Yêu cầu'),
            'village_id' => Yii::t('app', 'Thuộc xã'),
            'name' => Yii::t('app', 'Tên chiến dịch'),
            'ascii_name' => Yii::t('app', 'Ascii Name'),
            'short_description' => Yii::t('app', 'Mô tả ngắn'),
            'thumbnail' => Yii::t('app', 'Ảnh đại diện'),
            'campaign_code' => Yii::t('app', 'Mã chiến dịch'),
            'type' => Yii::t('app', 'Type'),
            'tags' => Yii::t('app', 'Tags'),
            'description' => Yii::t('app', 'Mô tả'),
            'content' => Yii::t('app', 'Chi tiết chiến dịch'),
            'view_count' => Yii::t('app', 'Lượt xem'),
            'like_count' => Yii::t('app', 'Lượt Like'),
            'comment_count' => Yii::t('app', 'Lượt bình luận'),
            'follower_count' => Yii::t('app', 'Lượt theo dõi'),
            'status' => Yii::t('app', 'Trạng thái'),
            'admin_note' => Yii::t('app', 'Admin Note'),
            'expected_amount' => Yii::t('app', 'Expected Amount'),
            'current_amount' => Yii::t('app', 'Current Amount'),
            'donor_count' => Yii::t('app', 'Donor Count'),
            'currency' => Yii::t('app', 'Loại tiền'),
            'honor' => Yii::t('app', 'Honor'),
            'approved_at' => Yii::t('app', 'Approved At'),
            'created_by' => Yii::t('app', 'Created By'),
            'created_for_user' => Yii::t('app', 'Bên yêu cầu'),
            'created_at' => Yii::t('app', 'Ngày tạo'),
            'updated_at' => Yii::t('app', 'Ngày thay đổi thông tin'),
            'donation_status' => Yii::t('app', 'Donation Status'),
            'finished_at' => Yii::t('app', 'Ngày kết thúc'),
            'started_at' => Yii::t('app', 'Ngày bắt đầu'),
            'start_date' => Yii::t('app', 'Ngày bắt đầu'),
            'end_date' => Yii::t('app', 'Ngày kết thúc'),
            'album_image' => 'Album ảnh',
            'categoryAsms' => 'Danh mục',
            'direct_donation_address' => 'Ủng hộ trực tiếp',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getVillage()
    {
        return $this->hasOne(Village::className(), ['id' => 'village_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLeadDonor()
    {
        return $this->hasOne(LeadDonor::className(), ['id' => 'lead_donor_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedForUser()
    {
        return $this->hasOne(User::className(), ['id' => 'created_for_user']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDonationRequest()
    {
        return $this->hasOne(DonationRequest::className(), ['id' => 'donation_request_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCampaignCategoryAsms()
    {
        return $this->hasMany(CampaignCategoryAsm::className(), ['campaign_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCampaignFollowings()
    {
        return $this->hasMany(CampaignFollowing::className(), ['campaign_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNews()
    {
        return $this->hasMany(News::className(), ['campaign_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTransactions()
    {
        return $this->hasMany(Transaction::className(), ['campaign_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCampaignRelatedAsms()
    {
        return $this->hasMany(CampaignRelatedAsm::className(), ['source_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCampaignGalleries()
    {
        return $this->hasMany(CampaignGallery::className(), ['campaign_id' => 'id']);
    }

    /**
     * @return array
     */
    public static function listType()
    {
        $lst = [
            self::TYPE_ITEM => 'Hiện vật',
            self::TYPE_MONEY => 'Tiền mặt',
        ];
        return $lst;
    }

    /**
     * @return int
     */
    public function getTypeName()
    {
        $lst = self::listType();
        if (array_key_exists($this->type, $lst)) {
            return $lst[$this->type];
        }
        return $this->type;
    }

    /**
     * @return array
     */
    public static function listStatus()
    {
        $lst = [
            self::STATUS_NEW => 'Mới tạo',
            self::STATUS_ACTIVE => 'Đang chạy',
            self::STATUS_INACTIVE => 'Tạm dừng',
            self::STATUS_DONE => 'Hoàn thành',
            self::STATUS_DELETED => 'Đã xóa',
        ];
        return $lst;
    }

    /**
     * @return int
     */
    public function getStatusName()
    {
        $lst = self::listStatus();
        if (array_key_exists($this->status, $lst)) {
            return $lst[$this->status];
        }
        return $this->status;
    }

    public function getThumbnailLink()
    {
        $imagePath = Yii::$app->params['upload_images'];
        $pathLink = Yii::getAlias("@web/" . $imagePath . "/");
        $filename = null;
        if ($this->thumbnail) {
            $filename = $this->thumbnail;
        } else {
            /** @var CampaignGallery $gallery */
            foreach ($this->campaignGalleries as $gallery) {
                $filename = $gallery->name;
                break;
            }
        }
        if (!$filename) {
            $pathLink = Yii::getAlias("@web/img/");
            $filename = 'bg_df.png';
        }

        return Url::to($pathLink . $filename, true);
    }

    public function getNeedAmount()
    {
        $neededAmount = $this->expected_amount - $this->current_amount;
        return $neededAmount > 0 ? $neededAmount : 0;
    }

    public function getNumberDayRemaining()
    {
        $remainTime = $this->finished_at - time();
        $remainTime = $remainTime > 0 ? $remainTime : 0;
        return (int)($remainTime / 24 / 60 / 60);
    }

    public function getImagesForDropzone()
    {
        if ($this->campaignGalleries && count($this->campaignGalleries) > 0) {
            $data = [];
            $requestImage = Yii::$app->params['upload_images'];
            $pathLink = Yii::getAlias("@web/" . $requestImage . "/");
            foreach ($this->campaignGalleries as $item) {
                $row = [];
                $row['name'] = $item->name;
                $row['thumbnail'] = $pathLink . $item->name;
                $data[] = $row;
            }
        } else {
            return [];
        }

        return $data;
    }

    public function assignImages()
    {
        if (!is_array($this->imageAsms) && trim($this->imageAsms) !== '') {
            $images = explode(',', $this->imageAsms);
            $deleteImageGalleries = CampaignGallery::find()->andWhere(['campaign_id' => $this->id])->andFilterWhere([
                'not in',
                'name',
                $images
            ])->all();
            foreach ($deleteImageGalleries as $item) {
                $item->delete();
            }
            foreach ($images as $imageName) {
                $oldAsm = CampaignGallery::find()->andWhere(['campaign_id' => $this->id])->andWhere(['name' => $imageName])->one();
                if ($oldAsm) {
                    continue;
                }
                $campaignGallery = new CampaignGallery();
                $campaignGallery->campaign_id = $this->id;
                $campaignGallery->name = $imageName;
                $campaignGallery->alt = $imageName;
                if (!$campaignGallery->save()) {
                    return false;
                }
            }

            return true;
        }

        return true;
    }

    public function assignCategories()
    {
        if (is_array($this->categoryAsms)) {

            $deleteAsm = CampaignCategoryAsm::find()->andWhere(['campaign_id' => $this->id])->andFilterWhere([
                'not in',
                'category_id',
                $this->categoryAsms
            ])->all();
            foreach ($deleteAsm as $item) {
                $item->delete();
            }
            foreach ($this->categoryAsms as $catId) {
                $oldAsm = CampaignCategoryAsm::find()->andWhere(['campaign_id' => $this->id])->andWhere(['category_id' => $catId])->one();
                if ($oldAsm) {
                    continue;
                }
                $asm = new CampaignCategoryAsm();
                $asm->campaign_id = $this->id;
                $asm->category_id = $catId;

                if (!$asm->save()) {
                    return false;
                }
            }

            return true;
        }

        return true;
    }

    public function loadImageAsm()
    {
        if ($this->campaignGalleries && count($this->campaignGalleries) > 0) {
            $data = [];

            foreach ($this->campaignGalleries as $item) {


                $data[] = $item->name;
            }
        } else {
            $data = [];
        }

        return implode(',', $data);
    }

    public function loadCategoryAsm()
    {
        if ($this->campaignCategoryAsms && count($this->campaignCategoryAsms) > 0) {
            $data = [];

            foreach ($this->campaignCategoryAsms as $item) {


                $data[] = $item->category_id;
            }
        } else {
            $data = [];
        }

        return $data;
    }

    public static function getCampaignList($category_id = 0, $created_by = 0, $honor = 0, $user_type = User::TYPE_DONOR)
    {
        $query = static::find();

        if ($user_type == User::TYPE_DONOR || $user_type == User::TYPE_DONEE) {
            $query->andWhere(['campaign.status' => Category::STATUS_ACTIVE]);
        }

        if ($category_id > 0) {
            $query->joinWith("campaignCategoryAsms")
                ->andWhere(['campaign_category_asm.category_id' => $category_id]);
        }

        if ($created_by > 0) {
            $query->joinWith("createdBy")
                ->andWhere(['user.id' => $created_by]);
        }

        if ($honor > 0) {
            $query->andWhere(['campaign.id' => $honor]);
        }

        $provider = new ActiveDataProvider([
            'query' => $query,
            'pagination' => [
                'defaultPageSize' => 20,
            ]
        ]);
        return $provider;
    }

    /**
     * @return CampaignQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new CampaignQuery(get_called_class());
    }

    public function getTransaction($start_date, $end_date)
    {
        $this->start_date = $start_date;
        $this->end_date = $end_date;

        $query_trans = Transaction::find()
            ->andWhere(['campaign_id' => $this->id]);

        if ($end_date && $start_date) {
            $start_date = strtotime(str_replace('/', '-', $start_date) . ' 00:00:00');
            $end_date = strtotime(str_replace('/', '-', $end_date) . ' 23:59:59');
            $query_trans->andWhere('created_at >= :trans_start')->addParams([':trans_start' => $start_date]);
            $query_trans->andWhere('created_at <= :trans_end')->addParams([':trans_end' => $end_date]);
        }


        $provider = new ActiveDataProvider(['query' => $query_trans,
            'sort' => ['defaultOrder' => ['transaction_time' => SORT_DESC]]]);
        return $provider;
    }

    public static function getTopHot()
    {
        $data = Campaign::find()->andWhere(['status' => self::STATUS_ACTIVE])->orderBy('view_count desc')->limit(3)->all();
        return $data;
    }

    public static function getCampaignByCreatedBy($created_by)
    {
        $result = Campaign::find()->select(['id', 'name',])
            ->andWhere(['created_by' => $created_by])
            ->asArray()
            ->all();
        return $result;
    }

    public function getCurrency()
    {
        return ' VNĐ';
    }

    public function donate($amount, $incrementUserDonate)
    {
        $this->current_amount = $this->current_amount + $amount;

        if ($incrementUserDonate) {
            $this->donor_count = $this->donor_count + 1;
        }
        return $this->save(false);

    }

    public function start()
    {
        if ($this->status == self::STATUS_APPROVED) {
            $this->status = self::STATUS_ACTIVE;
            return $this->save();
        }
        return false;
    }

    public function getContent()
    {
        $content = str_replace("/uploads/ckeditor/", Yii::$app->params['ApiAddress'] . "/uploads/ckeditor/", $this->content);
        return $content;
    }

    public function sendSmsEndOfCampaign()
    {
        /** @var Transaction $trans */
        $trans = Transaction::find()->select('user_id')->distinct()
            ->andWhere(['campaign_id' => $this->id])
            ->andWhere(['status' => Transaction::STATUS_SUCCESS])
            ->all();

        foreach ($trans as $tran) {
            $phone = $tran->user ? $tran->user->phone_number : "";
            if ($phone) {
                Brandname::sendCampaignEndSms($this, $phone);
            }
        }
    }

    public function getRateDonation()
    {
        $rate = "";
        /** @var CampaignDonationItemAsm[] $donations */
        $donations = CampaignDonationItemAsm::find()->andWhere(['campaign_id' => $this->id])->all();
        foreach ($donations as $donation) {
            $rate .= $donation->expected_number > 0 ?
                $donation->donationItem->name . ": " . number_format(($donation->current_number * 100 / $donation->expected_number), 2, ",", ".") . "% \n" : "";
        }

        return $rate;
    }

    public static function convertJsonToArray($input)
    {
        $listImage = json_decode($input);

        $result = [];
        if (is_array($listImage)) {
            foreach ($listImage as $item) {
                $row['name'] = $item->name;
                $row['type'] = $item->type;
                $row['size'] = $item->size;
                $result[] = $row;
            }
        }
        return $result;
    }


    public function getCampaignThumbnail()
    {
        return $this->thumbnail ? Yii::getAlias('@web') . "/" . Yii::getAlias('@cat_image') . "/" . $this->thumbnail : '';
    }

    public static function getCampaignByUser()
    {
        $campaign = Campaign::find();
        /** @var User $user */
        $user = Yii::$app->user->identity;
        if ($user) {
            if ($user->type == User::TYPE_VILLAGE) {
                $campaign->andWhere(['village_id' => $user->village_id]);
            }
            if ($user->type == User::TYPE_LEAD_DONOR) {
                $campaign->andWhere(['lead_donor_id' => $user->lead_donor_id]);
            }
        }

        return $campaign->all();
    }

    public function getCampaignImage()
    {
        return $this->thumbnail ? Yii::getAlias('@web') . "/" . Yii::getAlias('@cat_image') . "/" . $this->thumbnail : '';
    }
}
